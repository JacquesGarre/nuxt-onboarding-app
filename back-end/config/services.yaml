# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    router.request_context.host: '%env(resolve:HOST)%'
    router.request_context.scheme: '%env(resolve:SCHEME)%'
    asset.request_context.secure: false

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    App\EventListener\UserEventListener:
        tags:
            -
                name: 'doctrine.event_listener'
                event: 'prePersist'
                priority: 500
                connection: 'default'
            -
                name: 'doctrine.event_listener'
                event: 'postPersist'
                priority: 500
                connection: 'default'
    App\EventListener\ApiTokenEventListener:
        tags:
            -
                name: 'doctrine.event_listener'
                event: 'prePersist'
                priority: 500
                connection: 'default'
            -
                name: 'doctrine.event_listener'
                event: 'preUpdate'
                priority: 500
                connection: 'default'
    App\EventListener\HttpKernel\CorsSubscriber:
        tags:
            - { name: kernel.event_subscriber }
    App\EventSubscriber\DuplicateEntryExceptionSubscriber:
        tags:
            - { name: kernel.event_subscriber }